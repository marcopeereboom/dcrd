// Copyright (c) 2019 The Decred developers
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

package blockchain

import (
	"bytes"
	"encoding/binary"
	"encoding/hex"
	"io/ioutil"
	"os"
	"reflect"
	"testing"

	"github.com/davecgh/go-spew/spew"
	"github.com/decred/dcrd/chaincfg/chainhash"
	"github.com/decred/dcrd/chaincfg/v2"
	"github.com/decred/dcrd/database/v2"
)

const (
	defaultValues = "64000000000000000500000000000000010000000000000002000000000000000300000000000000fdfffffffffffffffeffffffffffffff"

	defaultEmptyValues

	tooManyValues
)

var (
	values []byte
	empty  []byte
	many   []byte
)

func init() {
	var err error
	values, err = hex.DecodeString(defaultValues)
	if err != nil {
		panic(err)
	}
	empty, err = hex.DecodeString(defaultEmptyValues)
	if err != nil {
		panic(err)
	}
	many, err = hex.DecodeString(tooManyValues)
	if err != nil {
		panic(err)
	}
}

func TestSerializeTreasuryState(t *testing.T) {
	tests := []struct {
		name        string
		state       TreasuryState
		expectError bool
		expected    []byte
	}{
		{
			name: "equal",
			state: TreasuryState{
				Balance: 100,
				Values:  []int64{1, 2, 3, -3, -2},
			},
			expected: values,
		},
		{
			name: "just enough",
			state: TreasuryState{
				Balance: 100,
				Values:  make([]int64, TreasuryMaxEntriesPerBlock),
			},
			expected: empty,
		},
		{
			name: "negative",
			state: TreasuryState{
				Balance: -100,
				Values:  []int64{1, 2, 3, -3, -2},
			},
			expectError: true,
		},
		{
			name: "too many",
			state: TreasuryState{
				Balance: 100,
				Values:  make([]int64, TreasuryMaxEntriesPerBlock+1),
			},
			expectError: true,
		},
	}

	for i, test := range tests {
		b, err := serializeTreasuryState(test.state)
		t.Logf("%v %v %v", i, test.name, err)
		if test.expectError {
			if err == nil {
				t.Fatalf("%v %v (serialized): expected an error",
					i, test.name)
			}
			continue
		} else {
			if err != nil {
				t.Fatalf("%v %v (serialized) unexpected error: %v",
					i, test.name, err)
			}
		}
		if !bytes.Equal(test.expected, b) {
			t.Fatalf("%v %v (serialized): got %x expected %x",
				i, test.name, b, test.expected)
		}
		tso, err := deserializeTreasuryState(b)
		if err != nil {
			t.Fatalf("%v %v (deserialized): %v",
				i, test.name, err)
		}
		if !reflect.DeepEqual(test.state, *tso) {
			t.Fatalf("%v %v (equal): got %v expected %v",
				i, test.name, *tso, test.state)
		}
	}
}

func TestDeserializeTreasuryState(t *testing.T) {
	tests := []struct {
		name        string
		state       []byte
		expectError bool
		expected    TreasuryState
	}{
		{
			name:  "equal",
			state: values,
			expected: TreasuryState{
				Balance: 100,
				Values:  []int64{1, 2, 3, -3, -2},
			},
		},
		{
			name:        "empty",
			state:       nil,
			expectError: true,
		},
		{
			name:        "short",
			state:       values[0 : len(values)/2],
			expectError: true,
		},
		{
			name:        "one byte short",
			state:       values[0 : len(values)-1],
			expectError: true,
		},
		{
			name:        "too many",
			state:       many,
			expectError: true,
		},
	}

	for i, test := range tests {
		tso, err := deserializeTreasuryState(test.state)
		t.Logf("%v %v %v", i, test.name, err)
		if test.expectError {
			if err == nil {
				t.Fatalf("%v %v (deserialized): expected an error",
					i, test.name)
			}
			continue
		} else {
			if err != nil {
				t.Fatalf("%v %v (deserialized) unexpected error: %v",
					i, test.name, err)
			}
		}
		b, err := serializeTreasuryState(test.expected)
		if err != nil {
			t.Fatalf("%v %v (serialized): %v", i, test.name, err)
		}
		if !bytes.Equal(test.state, b) {
			t.Fatalf("%v %v (serialized): got %x expected %x",
				i, test.name, b, test.expected)
		}
		if !reflect.DeepEqual(*tso, test.expected) {
			t.Fatalf("%v %v (equal): got %v expected %v",
				i, test.name, *tso, test.expected)
		}
	}
}

// TestTreasuryDatabase tests treasury database functionality.
func TestTreasuryDatabase(t *testing.T) {
	// Create a new database to store treasury state.
	dbName := "ffldb_treasurydb_test"
	dbPath, err := ioutil.TempDir("", dbName)
	if err != nil {
		t.Fatalf("unable to create treasury db path: %v", err)
	}
	defer os.RemoveAll(dbPath)
	net := chaincfg.RegNetParams().Net
	testDb, err := database.Create(testDbType, dbPath, net)
	if err != nil {
		t.Fatalf("error creating treasury db: %v", err)
	}
	defer testDb.Close()

	// Initialize the database, then try to read the version.
	err = addTreasuryBucket(testDb)
	if err != nil {
		t.Fatalf("%v", err.Error())
	}

	// Write maxTreasuryState records out.
	maxTreasuryState := uint64(1024)
	for i := uint64(0); i < maxTreasuryState; i++ {
		// Create synthetic treasury state
		ts := TreasuryState{
			Balance: int64(i),
			Values:  []int64{int64(i), -int64(i)},
		}

		// Create hash of counter.
		b := make([]byte, 16)
		binary.LittleEndian.PutUint64(b[0:], i)
		hash := chainhash.HashH(b)

		err = testDb.Update(func(dbTx database.Tx) error {
			return dbPutTreasury(dbTx, hash, ts)
		})
		if err != nil {
			t.Fatalf("%v", err.Error())
		}
	}

	// Pull records back out.
	for i := uint64(0); i < maxTreasuryState; i++ {
		// Create synthetic treasury state
		ts := TreasuryState{
			Balance: int64(i),
			Values:  []int64{int64(i), -int64(i)},
		}

		// Create hash of counter.
		b := make([]byte, 16)
		binary.LittleEndian.PutUint64(b[0:], i)
		hash := chainhash.HashH(b)

		var tsr *TreasuryState
		err = testDb.View(func(dbTx database.Tx) error {
			tsr, err = dbFetchTreasury(dbTx, hash)
			return err
		})
		if err != nil {
			t.Fatalf("%v", err.Error())
		}

		if !reflect.DeepEqual(ts, *tsr) {
			t.Fatalf("not same treasury state got %v wanted %v",
				spew.Sdump(ts), spew.Sdump(*tsr))
		}
	}
}
